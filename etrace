#!/usr/bin/env python
import argparse
import urllib2
import json
import random
import sys
import os
import time
import socket
import re
sys.path.insert(0, "%s/lib" % ( os.path.dirname(os.path.realpath(__file__) ) ) )
import MeasurementPrint

PROBE_URL = 'https://atlas.ripe.net/api/v1/probe/?limit=100'

### AUTH
authfile = "%s/.atlas/auth" % os.environ['HOME']
if not os.path.exists(authfile):
    print >>sys.stderr, ("Authentication file %s not found" % authfile)
    sys.exit(1)
auth = open(authfile)
KEY = auth.readline()[:-1]
auth.close()
KEY.rstrip()
### END AUTH

MSM_URL = "https://atlas.ripe.net/api/v1/measurement/?key=%s" % KEY

MSM_FETCH_URL = "https://atlas.ripe.net//api/v1/measurement/"

class JsonRequest(urllib2.Request):
    def __init__(self, url):
        urllib2.Request.__init__(self, url)
        self.add_header("Content-Type", "application/json")
        self.add_header("Accept", "application/json")

def oneofftrace( prb_id, dst, af=4 ):
   print >>sys.stderr,"attempting msm from prb:%s to dst:%s" % ( prb_id, dst )
   data = {
      'definitions': [
         {
            'target': dst,
            'description': 'etrace %s to %s (IPv%d)' % ( prb_id, dst, af),
            'type': 'traceroute',
            'protocol': 'ICMP',
            'resolve_on_probe': True,
            'af': af,
            'is_oneoff': True
         }
      ],
      "probes": [
         {
            'requested': 1,
            'type': 'probes',
            'value': str(prb_id)
         }
      ]
   };
   json_data = json.dumps( data )
   print json_data
   msm_req = JsonRequest(MSM_URL)
   try:
      msm_conn = urllib2.urlopen(msm_req, json_data)
   except urllib2.HTTPError as e:
        print >>sys.stderr, ("Fatal error when reading results: %s" % e.read())
        sys.exit(1)
   # Now, parse the answer
   msm_meta = json.load(msm_conn)
   msm_id = msm_meta["measurements"][0]
   return msm_id

def print_results( res, msm_id ):
   for hop in res:
# {u'result': [{u'rtt': 190.887, u'ttl': 246, u'from': u'62.115.137.151', u'size': 28}, {u'rtt': 190.975, u'ttl': 246, u'from': u'62.115.137.151', u'size': 28}, {u'rtt': 191.985, u'ttl': 246, u'from': u'62.115.137.151', u'size': 28}], u'hop': 8}
      ips = {}
      for hr in hop['result']:
         if 'from' in hr: 
            if hr['from'] not in ips:
               ips[ hr['from'] ] = [ hr['rtt'] ]
            else:
               ips[ hr['from'] ].append( hr['rtt'] )
         else:
            print "%s err:%s" % ( hop['hop'] , hr )
            
      for ip in ips:
         host = ip
         try:
            ghba = socket.gethostbyaddr(ip)
            host = ghba[0]
         except: pass
         asn = None
         try:
            asninfo = urllib2.urlopen( "https://stat.ripe.net/data/prefix-overview/data.json?max_related=0&resource=%s" % ( ip ) )
            asnjson = json.load( asninfo )
            asn = asnjson['data']['asns'][0]['asn']
         except: pass
         print "%s [AS%s] %s (%s) %s" % ( hop['hop'], asn, host, ip , sorted(ips[ip]) )

def doit( args ):
   url = PROBE_URL
   af = 4
   probe_id = None
   if args.probe_id:
      probe_id = args.probe_id
   else:
      if args.asnv4:
         url = "%s&asn_v4=%s" % ( url , args.asnv4 )
         af=4
      elif args.asnv6:
         url = "%s&asn_v6=%s" % ( url , args.asnv6 )
         af=6
      if args.country:
         url = "%s&country_code=%s" % ( url , args.country )
      try:
         req = urllib2.Request(url)
         req.add_header("Content-Type", "application/json")
         req.add_header("Accept", "application/json")
         conn = urllib2.urlopen( req ) 
      except:
         print "Can't get probe info from RIPE Atlas probe API: %s" ( url )
         return
      probe_info = json.load( conn )
      probes_meta = probe_info['objects']
      selected_probe = random.choice( probes_meta )
      probe_id = selected_probe['id']
   msm_id = oneofftrace( probe_id, args.dest, af)
   print >>sys.stderr, "msm id: %s" % ( msm_id )
   msm_recv = False
   while not msm_recv:
      time.sleep(10)
      msm_fetch_url = "%s/%d/result/" % ( MSM_FETCH_URL, msm_id )
      fetch_req = urllib2.Request( msm_fetch_url )
      fetch_conn = urllib2.urlopen( fetch_req )
      fetch_msm_info = json.load( fetch_conn )
      if len( fetch_msm_info ) > 0:
         msm_recv = True
   mres = fetch_msm_info[0]['result']
   prb_asn = None
   prb_cc = None
   try:
      if af==4:
         prb_asn = selected_probe['asn_v4']
      else:
         prb_asn = selected_probe['asn_v6']
   except: pass
   try:
      prb_cc = selected_probe['country_code']
   except: pass
   print "# msm_id:%s prb_id:%d prb_cc:%s prb_asn:%s" % ( msm_id , int(probe_id) , prb_cc , prb_asn )
   print MeasurementPrint.trace2txt( fetch_msm_info[0] )
   #print_results( mres, msm_id )

def strip_to_hostname( url ):
   parts = url.split('/')
   if len(parts) == 1:
      return url
   # http://www.testing.nl/
   elif parts[0] == 'http' or parts[0] == 'https':
      if parts [1] == '':
         return parts[2]
      else:
         raise
   # www.text.org/some/url
   return parts[0]

if __name__ == "__main__":
   parser = argparse.ArgumentParser()
   parser.add_argument('-a','--asnv4', help="select probe from this IPv4 ASN")
   parser.add_argument('-s','--asnv6', help="select probe from this IPv6 ASN")
   parser.add_argument('-p','--probe_id', help="select this specific probe")
   parser.add_argument('-c','--country', help="select probe from this country-code (2letter ISO)")
   parser.add_argument('dest', help="Destination")
   args = parser.parse_args()
   args.dest = strip_to_hostname( args.dest )
   doit( args )
